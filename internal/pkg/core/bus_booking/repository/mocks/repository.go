// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/tigprog/bus_booking/internal/pkg/core/bus_booking/models"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockInterface) Add(ctx context.Context, bb models.BusBooking) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, bb)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockInterfaceMockRecorder) Add(ctx, bb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockInterface)(nil).Add), ctx, bb)
}

// ChangeDateSeat mocks base method.
func (m *MockInterface) ChangeDateSeat(ctx context.Context, id uint, newDate string, newSeat uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDateSeat", ctx, id, newDate, newSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeDateSeat indicates an expected call of ChangeDateSeat.
func (mr *MockInterfaceMockRecorder) ChangeDateSeat(ctx, id, newDate, newSeat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDateSeat", reflect.TypeOf((*MockInterface)(nil).ChangeDateSeat), ctx, id, newDate, newSeat)
}

// ChangeSeat mocks base method.
func (m *MockInterface) ChangeSeat(ctx context.Context, id, newSeat uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSeat", ctx, id, newSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSeat indicates an expected call of ChangeSeat.
func (mr *MockInterfaceMockRecorder) ChangeSeat(ctx, id, newSeat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSeat", reflect.TypeOf((*MockInterface)(nil).ChangeSeat), ctx, id, newSeat)
}

// Delete mocks base method.
func (m *MockInterface) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockInterface) Get(ctx context.Context, id uint) (*models.BusBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.BusBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockInterface) List(ctx context.Context, offset, limit uint) ([]models.BusBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]models.BusBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInterfaceMockRecorder) List(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterface)(nil).List), ctx, offset, limit)
}
