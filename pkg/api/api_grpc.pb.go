// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	BusBookingList(ctx context.Context, in *BusBookingListRequest, opts ...grpc.CallOption) (*BusBookingListResponse, error)
	BusBookingAdd(ctx context.Context, in *BusBookingAddRequest, opts ...grpc.CallOption) (*BusBookingAddResponse, error)
	BusBookingGet(ctx context.Context, in *BusBookingGetRequest, opts ...grpc.CallOption) (*BusBookingGetResponse, error)
	BusBookingChangeSeat(ctx context.Context, in *BusBookingChangeSeatRequest, opts ...grpc.CallOption) (*BusBookingChangeSeatResponse, error)
	BusBookingChangeDateSeat(ctx context.Context, in *BusBookingChangeDateSeatRequest, opts ...grpc.CallOption) (*BusBookingChangeDateSeatResponse, error)
	BusBookingDelete(ctx context.Context, in *BusBookingDeleteRequest, opts ...grpc.CallOption) (*BusBookingDeleteResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) BusBookingList(ctx context.Context, in *BusBookingListRequest, opts ...grpc.CallOption) (*BusBookingListResponse, error) {
	out := new(BusBookingListResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.mc2.api.Admin/BusBookingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BusBookingAdd(ctx context.Context, in *BusBookingAddRequest, opts ...grpc.CallOption) (*BusBookingAddResponse, error) {
	out := new(BusBookingAddResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.mc2.api.Admin/BusBookingAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BusBookingGet(ctx context.Context, in *BusBookingGetRequest, opts ...grpc.CallOption) (*BusBookingGetResponse, error) {
	out := new(BusBookingGetResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.mc2.api.Admin/BusBookingGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BusBookingChangeSeat(ctx context.Context, in *BusBookingChangeSeatRequest, opts ...grpc.CallOption) (*BusBookingChangeSeatResponse, error) {
	out := new(BusBookingChangeSeatResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.mc2.api.Admin/BusBookingChangeSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BusBookingChangeDateSeat(ctx context.Context, in *BusBookingChangeDateSeatRequest, opts ...grpc.CallOption) (*BusBookingChangeDateSeatResponse, error) {
	out := new(BusBookingChangeDateSeatResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.mc2.api.Admin/BusBookingChangeDateSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BusBookingDelete(ctx context.Context, in *BusBookingDeleteRequest, opts ...grpc.CallOption) (*BusBookingDeleteResponse, error) {
	out := new(BusBookingDeleteResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.mc2.api.Admin/BusBookingDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	BusBookingList(context.Context, *BusBookingListRequest) (*BusBookingListResponse, error)
	BusBookingAdd(context.Context, *BusBookingAddRequest) (*BusBookingAddResponse, error)
	BusBookingGet(context.Context, *BusBookingGetRequest) (*BusBookingGetResponse, error)
	BusBookingChangeSeat(context.Context, *BusBookingChangeSeatRequest) (*BusBookingChangeSeatResponse, error)
	BusBookingChangeDateSeat(context.Context, *BusBookingChangeDateSeatRequest) (*BusBookingChangeDateSeatResponse, error)
	BusBookingDelete(context.Context, *BusBookingDeleteRequest) (*BusBookingDeleteResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) BusBookingList(context.Context, *BusBookingListRequest) (*BusBookingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusBookingList not implemented")
}
func (UnimplementedAdminServer) BusBookingAdd(context.Context, *BusBookingAddRequest) (*BusBookingAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusBookingAdd not implemented")
}
func (UnimplementedAdminServer) BusBookingGet(context.Context, *BusBookingGetRequest) (*BusBookingGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusBookingGet not implemented")
}
func (UnimplementedAdminServer) BusBookingChangeSeat(context.Context, *BusBookingChangeSeatRequest) (*BusBookingChangeSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusBookingChangeSeat not implemented")
}
func (UnimplementedAdminServer) BusBookingChangeDateSeat(context.Context, *BusBookingChangeDateSeatRequest) (*BusBookingChangeDateSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusBookingChangeDateSeat not implemented")
}
func (UnimplementedAdminServer) BusBookingDelete(context.Context, *BusBookingDeleteRequest) (*BusBookingDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusBookingDelete not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_BusBookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusBookingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BusBookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.mc2.api.Admin/BusBookingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BusBookingList(ctx, req.(*BusBookingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BusBookingAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusBookingAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BusBookingAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.mc2.api.Admin/BusBookingAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BusBookingAdd(ctx, req.(*BusBookingAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BusBookingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusBookingGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BusBookingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.mc2.api.Admin/BusBookingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BusBookingGet(ctx, req.(*BusBookingGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BusBookingChangeSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusBookingChangeSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BusBookingChangeSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.mc2.api.Admin/BusBookingChangeSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BusBookingChangeSeat(ctx, req.(*BusBookingChangeSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BusBookingChangeDateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusBookingChangeDateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BusBookingChangeDateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.mc2.api.Admin/BusBookingChangeDateSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BusBookingChangeDateSeat(ctx, req.(*BusBookingChangeDateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BusBookingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusBookingDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BusBookingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.mc2.api.Admin/BusBookingDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BusBookingDelete(ctx, req.(*BusBookingDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozon.dev.mc2.api.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BusBookingList",
			Handler:    _Admin_BusBookingList_Handler,
		},
		{
			MethodName: "BusBookingAdd",
			Handler:    _Admin_BusBookingAdd_Handler,
		},
		{
			MethodName: "BusBookingGet",
			Handler:    _Admin_BusBookingGet_Handler,
		},
		{
			MethodName: "BusBookingChangeSeat",
			Handler:    _Admin_BusBookingChangeSeat_Handler,
		},
		{
			MethodName: "BusBookingChangeDateSeat",
			Handler:    _Admin_BusBookingChangeDateSeat_Handler,
		},
		{
			MethodName: "BusBookingDelete",
			Handler:    _Admin_BusBookingDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
